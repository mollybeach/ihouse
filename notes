
 /***************OBJECT EXAMPLES**************/
 var obj = {key1: "value1", key2: "value2"};
Object.assign(obj, {key3: "value3"});

remember when assigning variable a value or a key to object u need to use []
let x = (item) => nums[item] > nums[item-1] ? Object.assign(obj, {[item]: [sum] }): false;

 //Object.entries(obj).forEach(([key, value]) => value === diff ? obj2[key]=1: false);
 //console.log(obj2)
 sort obj by value
    const sortable = Object.entries(obj)
    .sort(([,a],[,b]) => a-b)
    .reduce((r, [k, v]) => ({ ...r, [k]: v }), {});
    console.log(sortable)
 Object.entries(books).forEach(([key, value]) => value === 0 ? true: false);

    /*
    for(const i in newArr){
      if(newArr[i]!=diff && i%2===0){
        newArr.splice(i, 2)
      }
      }
    */
Object.entries(obj).forEach(([key, value]) => {if (key === 0) console.log(value);});
Object.entries(obj).forEach(([key, value]) => {if (value === 0) console.log(key);});
let getKeyByValue = (object, value) => Object.keys(object).find(key => object[key] === value);

so u can use two arrow function witinin another crazy
  let getObjEntry = (objInput, input) => Object.entries(objInput).forEach(([key, value]) => {if (value === input) return key;});



let getObjEntry = (objInput, input) => Object.entries(objInput).forEach(([key, value]) => value === 0 ?  console.log('true'): console.log('false') );



/*****OBJ FOR EACH*****/

     removing objs with a certain values
  for (const key in obj) {
    if (obj[key] != curr) {
      delete obj[key];
    }
  }
  
  Object.keys(obj).forEach((key)=> obj[key]!=curr ? delete obj[key] : false);


/*    let sortObj= Object.entries(obj).sort(([,a],[,b]) => a-b)
    .reduce((r, [k, v]) => ({ ...r, [k]: v }), {});*/
    //}
  //let sortObj= Object.entries(obj).sort(([,a],[,b]) => a-b)
 // let sortObj= Object.entries(obj).sort(([,a], [,b]) => a-b)
  //  .reduce((r, [k, v]) => ({ ...r, [k]: v }), {});
   // console.log(sortObj)
/***COUNT DIGITS IN A NUMBER*****/
(Math.max(Math.floor(Math.log10(Math.abs(yNum))), 0)+1)




function ternary() { return true ? 'awesome' : 'nicht awesome' }
ternary()     // returns 'awesome'



let answer = '';
let getObjEntry = (objInput, input) => Object.entries(objInput).forEach(([key, value], input) => value === input ? answer = key : '');
/***ENTRY*/
 Let’s extract the entries of hero object:

const hero = {
  name: 'Batman',
  city: 'Gotham'  
};

Object.entries(hero); // => `[['name', 'Batman'], ['city', 'Gotham']]`

/****FOR LOOP ON OBJ****/
const books = {
  'The Shining': 5.50,
  'Harry Potter and the Goblet of Fire': 10.00,
  '1984': 0
};

for (const [book, price] of Object.entries(books)) {
  if (price === 0) {
    console.log(book);
  }
}
/**FOR EACH NEEDS example:     x.forEach(()=>) u need the round brace
 Object.entries(books).forEach((book) => console.log(book));
 Object.entries(books).forEach(([book, price]) => {if (price === 0) console.log(book);});
// logs '1984'
/***/
  // Object.keys(myobj)[0] = 'hi';
 //  Object.values(myobj)[0] = count;
//  obj[currentItem] = count;
 //let obj = {};
 //let mostCommon = Object.keys(obj).find(key => obj  [key] === count)
 //Object.keys(obj)prints all keys
 //Object.values(obj) prints all values
//Object.keys(obj)[0] prints first key in object
//Object.values(obj)[0] prints first value in object
//remove empty array values from array 
 let filtered = pArray.filter(Boolean); here’s how u remove empty array values

 let bannedSet = new Set();
  banned.forEach(e => bannedSet.add(e));
  //checking if object has that variable
  let result = pArray.filter(x => !bannedSet.has(x));
Object.entries(books).forEach(([book, price]) => {if (price === 0) console.log(book);});

//checking if variable exists
  if (typeof variable === 'undefined' || variable === null) {
    // variable is undefined or null
}
//Count how many times an item exists by using for each and storing it 

let countObj = {};
let arr = [1,2,3,1,2,3,4];
let countFunc = keys => {
  countObj[keys] = ++countObj[keys] || 1;
}

arr.forEach(countFunc);
// {1: 2, 2: 2, 3: 2, 4: 1}
Object.entries(books).forEach(([book, price]) => {if (price === 0) console.log(book);});
/*var mostCommonWord = function (paragraph, banned) {
  let wordCount = 0;
  let mostCommon = "";
  let pArray = paragraph.toLowerCase().replace(/(~|`|!|@|#|$|%|^|&|\*|\(|\)|{|}|\[|\]|;|:|\"|'|<|,|\.|>|\?|\/|\\|\||-|_|\+|=)/g,"").split(" ");
  let bannedSet = new Set();
  banned.forEach((e) => bannedSet.add(e));
  console.log(bannedSet);
  let result = pArray.filter((x) => !bannedSet.has(x));
  let resultStr = result.toString();
  for (let i = 0; i < result.length; i++) {
    let currentItem = result[i];
    let regex = new RegExp("\\b" + currentItem + "\\b", "g");
    let found = resultStr.match(regex);
    if (found.length > wordCount) {
      wordCount = found.length;
      mostCommon = currentItem;
    }
  }
  return mostCommon;
};
mostCommonWord("Bob hit a ball, the hit BALL flew far after it was hit.", [
  "hit",
  "ball",
]);
*/
3.4 Use property value shorthand. eslint: object-shorthand

Why? It is shorter and descriptive.

const lukeSkywalker = 'Luke Skywalker';

// bad
const obj = {
  lukeSkywalker: lukeSkywalker,
};

// good
const obj = {
  lukeSkywalker,
};
/****************************Set() EXAMPLES*************************/
 let bannedSet = new Set();
  banned.forEach((e) => bannedSet.add(e));
  console.log(bannedSet);
  let result = pArray.filter((x) => !bannedSet.has(x));
/***************************IF STATEMENTS EXAMPLES*************************/
a => (a < 10) ? 'valid' : 'invalid'
As you've probably found, the body of an arrow function without braces can only be a single expression, so if statements are not allowed.

// good
const itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);

// good
const itemHeight = (item) => {
  const { height, largeSize, smallSize } = item;
  return height <= 256 ? largeSize : smallSize;
}
/****************************FOR EACH EXAMPLES*************************/
array1.forEach(element => console.log(element));

  let objV =  Object.values(countObj)
  objV.forEach(element => console.log(element));
  
  /**FOR EACH NEEDS example:     x.forEach(()=>) u need the round brace
 Object.entries(books).forEach((book) => console.log(book));

/*****************************REGEX EXAMPLES*********************************/
let paragraph = "Bob hit a ball, the hit BALL flew far after it was hit.";
 let pArray = paragraph.toLowerCase().replace(/(~|`|!|@|#|$|%|^|&|\*|\(|\)|{|}|\[|\]|;|:|\"|'|<|,|\.|>|\?|\/|\\|\||-|_|\+|=)/g,"").split(" ");

 /********TO USE VARIABLES IN REGEX YOU HAVE TO SET IT UP LIKE THIS******/
   let currentItem = result[i]; //variable
  let regex = new RegExp("\\b" + currentItem + "\\b", "g"); //use the \\b 'break s to match just a entire word not just part of a word
  //.match for matching any part of a word/full word if u use //b
  let found = resultStr.match(regex);

  /*********************ARROW FUNCTION EXAMPLES*********************************/
  function reg (a){
  return a + 100;
} 
console.log(m(10)) //returns 110


  let arrow = a => a + 100;
  console.log(arrow(10)) //returns 110
  
  const materials = [
  'Hydrogen',
  'Helium',
  'Lithium',
  'Beryllium'
];

console.log(materials.map(material => material.length));
// expected output: Array [8, 6, 7, 9]
//lol good for longest word

// Traditional Function
function (a){
  return a + 100;
}

// Arrow Function Break Down

// 1. Remove the word "function" and place arrow between the argument and opening body bracket
(a) => {
  return a + 100;
}

// 2. Remove the body brackets and word "return" -- the return is implied.
(a) => a + 100;

// 3. Remove the argument parentheses
a => a + 100;

/**********MATH MAX*********/

console.log(Math.max(1, 3, 2));
// expected output: 3

console.log(Math.max(-1, -3, -2));
// expected output: -1

const array1 = [1, 3, 2];

console.log(Math.max(...array1));

/******FIND*******/
const array1 = [5, 12, 8, 130, 44];

const found = array1.find(element => element > 10);

console.log(found);
// expected output: 12
const inventory = [
  {name: 'apples', quantity: 2},
  {name: 'bananas', quantity: 0},
  {name: 'cherries', quantity: 5}
];

function isCherries(fruit) {
  return fruit.name === 'cherries';
}

console.log(inventory.find(isCherries));
// { name: 'cherries', quantity: 5 }
const inventory = [
  {name: 'apples', quantity: 2},
  {name: 'bananas', quantity: 0},
  {name: 'cherries', quantity: 5}
];

const result = inventory.find( ({ name }) => name === 'cherries' );

console.log(result) // { name: 'cherries', quantity: 5 }
const trees = [
  "birch",
  "maple",
  "oak",
  "poplar"
];

const result = trees.find(tree => tree.startsWith("m"));

/********FIND WITH OBJ*******/
function getKeyByValue(object, value) {
  return Object.keys(object).find(key => object[key] === value);
}
/***IN ARROW FORM****/
let getKeyByValue = (object, value) => Object.keys(object).find(key => object[key] === value);
const objExample = {"first" : "1", "second" : "2"};
console.log(getKeyByValue(objExample,"2"));
/**FOR EACH NEEDS example:     x.forEach(()=>) u need the round brace
/**********************************************BOOLEAN******/
let expression = 2;
var x = !!(expression);
console.log(x)
//evaluates to true

var x = Boolean(expression);     // use this...
var x = !!(expression);          // ...or this
var x = new Boolean(expression); // don't use this!
/****BOOL ARR EXAMP**/
let arr = [1, 2, 3, 4]
for(const item in arr){
 
  let x =arr[x]; 
  if(!!x)
  {console.log('it exists')
  }
}
/*prints: 
 it exists
it exists
it exists
it exists
*/

/*****U CAN ONLY HAVE ONE RETURN STATEMENT PER FUNCTION EVEN IF WITHIN******/
let find = () => {
let arr = [1, 2, 3, 4]
for(const item in arr){
  let x =arr[item]; 
  if(!!x)
  {
    return true
  }
}
}
find() //returns true one time

/*****SPREAD***/
function a(...args){
  b(...args);
  b(6, ...args, 8) // You can even add more elements
}
function b(){
  console.log(arguments)
}

a('input', 2, 3)



/******NICE***/
var mostCommonWord = function (paragraph, banned) {
  let obj = {};
  let mostCommon;
 let pArray = paragraph.toLowerCase().replace(/(~|`|!|@|#|$|%|^|&|\*|\(|\)|{|}|\[|\]|;|:|\"|'|<|,|\.|>|\?|\/|\\|\||-|_|\+|=)/g," ").split(" ");
  let bannedSet = new Set();
  banned.forEach((e) => bannedSet.add(e));
  let result = pArray.filter(Boolean).filter((x) => !bannedSet.has(x));
  let counter = (keys) => (obj[keys] = ++obj[keys] || 1);
  result.forEach(counter);
  let topWordLength = Math.max(...Object.values(obj));
  Object.entries(obj).forEach(([key, value]) =>
    value === topWordLength ? (mostCommon = key) : false
  );
  return mostCommon
};

var mostCommonWord = function (paragraph, banned) {
  let obj = {};
  let mostCommon;
 let wordArr = paragraph.toLowerCase().replace(/(~|`|!|@|#|$|%|^|&|\*|\(|\)|{|}|\[|\]|;|:|\"|'|<|,|\.|>|\?|\/|\\|\||-|_|\+|=)/g," ").split(" ");
  let bannedSet = new Set();
  banned.forEach((e) => bannedSet.add(e));
  let result = wordArr.filter(Boolean).filter((x) => !bannedSet.has(x));
  let counter = (key) => (obj[key] = ++obj[key] || 1);
  result.forEach(counter);
  let topWordLength = Math.max(...Object.values(obj));
  let findMatch = (key) => obj[key] === topWordLength ? (mostCommon = key) : false;
  result.forEach(findMatch)
  return mostCommon
};
mostCommonWord("Bob hit a ball, the hit BALL ball flew far after it was hit.", ['hit'])

/*****FASTEST WAY TO MOVE INDEX TO BACK****/
students.push(students.shift(i));


/***ARRAY*****/

const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
//console.log(animals.slice(1)); //this deletes ant i guess it it's the new
//starting point


/******SPLICE******/
let exampleSpliceLoop = function(input){
 let cut;

for(i=0; i<input.length; i++ ){
   cut = input.slice(i); //the new array start at the argument u put in 
}
return(cut); //returns ['f']
}

exampleSpliceLoop(['a','b','c','d','e', 'f']);
     let matchStudents;
     let matchSandwiches;
     matchStudents = students.slice(i); //removes that index from array
     matchSandwiches = sandwiches.slice(i);//removes that index from array
      matchSandwiches = sandwiches.splice(i, 1); //makes a new array w that index && modifies original array
      matchStudents = students.splice(i, 1);  //makes a new array w that index
      && modifies original array
      
  /******** ANOTHER***/
    let matchStudents=[];
    let matchSandwiches=[];
    /****TO PUSH MULTIPLE INDEXES TO AN ARRAY AND NOT PUSH THE WHOLE ARRAY ******/
  for(i=0; i<max; i++ ){
    matchSandwiches.push(parseFloat((sandwiches.splice(i, 1).toString())));
    matchStudents.push(parseFloat((students.splice(i, 1).toString())));
  }

  //  /*  let lengthArr = [];
  lengthArr.push(students.length, sandwiches.length);
  let max = Math.max(...lengthArr);
  */
//for(i=0; i<max*2; i++ ){ 

/****SORT*** REVERSE***/
fruits.reverse();

let input = 10000;
let n = 10
how many times a number can be divided by N
console.log(Math.floor(Math.log(input)/Math.log(n)) )
result -> 4


/*******ITERATE THROUGH A STRING IN REVERSE*******/
function reverse(str){  
  let reversed = "";      
   for (var i = str.length - 1; i >= 0; i--){         
     reversed += str[i];  
   }     
  return reversed;